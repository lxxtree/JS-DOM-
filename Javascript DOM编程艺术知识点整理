第3章DOM
DOM有4个非常实用的方法：getElementById、getElementsByTagName、getAttribute和setAttribute。
1、DOM是“Document Object Model”（文档对象模型）的首字母缩写。
      1）D是document。当创建了一个网页并把它加载到Web浏览器中时，DOM就在幕后悄然而生。它将根据你编写的网页文档创建一个文档对象。
      2）O是对象。Javscript语言的对象可以分为3种：
            a.用户定义对象（user-defined object）：由程序员自行创建
            b.内建对象（native object）：内建在Javascript语言里的对象，如Array、Math和Date等。
            c.宿主对象（host object ）：由浏览器提供的对象。
     Javascript语言发展的初期，程序员在编写Javascript脚本时经常需要用到一些非常重要的宿主对象，它们当中最基础的是window对象。
    window对象代表着浏览器窗口本身，这个对象的属性和方法通常被统称为BOM（浏览器对象模型），称之为 Window Object Model也贴切。
     对网页的内容进行处理，用来实现这一目标的载体就是document对象
        3）M代表着Model（模型），但说它代表着Map（地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。
             DOM代表着被加载到浏览器窗口里的当前网页：浏览器向我们提供了当前网页的地图（或者说模型），而我们可以通过Javascript去读取这张地图。
             既然是地图，就必须有诸如方向、等高线、比例尺之类的记号。想要看懂和使用地图，就必须这些记号的含义和用途——这个道理同样适用于DOM。要想从DOM获得信息，我们必须先把各种用来表示和描述一份文档的记号弄明白。
             DOM把一份文档表示为一棵树，一棵节点树。文档是由节点构成的集合，只不过此时的节点是文档树上的树枝和树叶而已。
 
2、在DOM里存在着不同类型的节点
     1）元素节点（element node）
          例如<body>、<p>、<ul>等之类的元素
          各种标签提供了元素的名字。文本段落元素的名字是“p”，无序清单元素的名字是“ul”，列表项元素的名字是“li”。
          元素可以包含其他的元素。例如有的文档里所有的列表项元素都包含在一个无序清单元素的内部。事实上，没有被包含在其他元素里的唯一元素是<html>元素。它是我们节点树的根元素。
      2）文本节点（text node）
           如果一份文档完全由一些空白元素构成，它将有一个结构，但这份文档本身不会包含什么内容。在网上内容决定一切，没有内容的文档是没有任何价值的，而绝大数内容都是由文本提供。
          例如，<p>Don't forget to buy this stuff.</p>。“Don't forget to buy this stuff.”是一个文本节点
           在XHTML文档里，文本节点总是被包含在元素节点的内部。但并非所有的元素节点都包含有文本节点。例如有的文档里<ul>没有直接包含文本节点——它包含着其他的元素节点（一些<li>元素），<li>元素里包含着文本节点。
       3）属性节点（attribute node）   
            元素或多或少的有一些属性，属性的作用是对元素做出更具体的描述。
            例如<p title="a gentle reminder">Don't forget to buy this stuff.</p>
            在DOM中title="a gentle reminder"是一个属性节点，属性的节点总是被包含在元素节点中。
            并非所有的元素都包含着属性，但所有的属性都被包含在元素里。
第5章JavaScript2编程原则和良好习惯知识点
1、使用window对象的open()创建新的浏览器窗口 
     window.open(url,name,features)
    第一个参数是想在新窗口里打开的那份文档的URL地址。如果省略这个参数，屏幕上将弹出一个空白的浏览器窗口
    第二个参数是新窗口的名字，可以在代码里通过这个名字与新窗口进行通讯
    最后一个参数是一个以逗号分隔的字符串，其内容是新窗口的各种属性。这些属性包含新窗口的尺寸（宽度和高度）以及新窗口被激活或禁用的各种浏览功能（工具条、菜单条、初始显示位置，等等。）对这个参数应该掌握以下原则：新窗口的浏览功能要少而精。
  open()方法是BOM的一个典型应用案例，它的功能既不依赖于文档的内容，对文档的内容也无任何影响。这个方法只与此时此刻的用户浏览环境（具体讨论到例子，就是当前的window对象）有关。
   例子：下面这个函数是window.open()方法的一种典型应用：
       function popUp(winURL){
             window.open(winURL,"popup",width=320,height=480); 
       }
     这个函数将打开一个320像素宽、480像素高的新窗口“popup”。因为在这个函数里已经为新窗口命名，所以当把新的URL地址传给此函数时，这个函数将把新窗口里的现有文档替换为新URL地址处的文档，而不是再去创建一个窗口。

第8章充实文档的内容
无论何时何地都要把“循环渐进”和“预留退路”这两项原则牢记在心中。
所谓“循环渐进”progressive enhancement原则说的是这样一种思考问题的方法：从最核心的内容开始，逐步添加额外的功能。应该先用标记语言给核心内容加上正确的标记以使其获得正确的结构；然后再逐步充实被加上了正确标记的内容。充实的内容既可以是通过CSS样式表实现各种呈现效果，也可以是通过DOM脚本添加各种操作行为。
  如果你正在使用DOM技术添加核心内容，那么你添加他们的时机未免太迟了——核心内容应该在刚开始编写文档时就成为文档的组成部分。
“循环渐进”的一种必然结果就是“预留退路”。如果你按照“循环渐进”的原则去充实内容的，你为内容添加的样式和行为就会有足够的“预留退路”，那些缺乏必要的CSS和DOM支持的访问者就仍能够访问到你的核心内容。
JavaScript脚本只应该用来充实文档的内容，要避免使用DOM技术来直接插入核心内容。

